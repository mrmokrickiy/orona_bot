import os
import logging
import telebot
import openai
import requests
import random
from io import BytesIO
import base64

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# ========== üé® –°–û–ó–î–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ==========
@bot.message_handler(commands=['image', 'img', '–∫–∞—Ä—Ç–∏–Ω–∫–∞'])
def generate_image(message):
    try:
        prompt = message.text.split(' ', 1)[1] if ' ' in message.text else ''
        
        if not prompt:
            bot.reply_to(message, 'üé® –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å\n/image –º–∏–ª—ã–π –∫–æ—Ç–µ–Ω–æ–∫')
            return
        
        bot.reply_to(message, f'üé® –°–æ–∑–¥–∞—é: "{prompt}"...')
        
        response = openai.Image.create(prompt=prompt, n=1, size="1024x1024")
        image_url = response['data'][0]['url']
        
        image_response = requests.get(image_url)
        image_data = BytesIO(image_response.content)
        
        bot.send_photo(message.chat.id, image_data, caption=f'üé® {prompt}')
        
    except Exception as e:
        bot.reply_to(message, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏')

# ========== üì∏ –ê–ù–ê–õ–ò–ó –§–û–¢–û ==========
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        bot.reply_to(message, "üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
        
        file_info = bot.get_file(message.photo[-1].file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        
        response = requests.get(file_url)
        base64_image = base64.b64encode(response.content).decode('utf-8')
        
        analysis_response = openai.ChatCompletion.create(
            model="gpt-4-vision-preview",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ"},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                ]
            }],
            max_tokens=500
        )
        
        description = analysis_response.choices[0].message.content
        bot.reply_to(message, f"üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:\n\n{description}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ")

# ========== üé§ –ì–û–õ–û–°–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ==========
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    bot.reply_to(message, "üé§ –í–∏–∂—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É! üí¨")

# ========== üé≤ –ò–ì–†–´ ==========
games = {}

@bot.message_handler(commands=['game', '–∏–≥—Ä–∞'])
def start_game(message):
    games_list = """
üéÆ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:*

/quiz - üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
/riddle - üîç –ó–∞–≥–∞–¥–∫–∞ (—É–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É)
/guess - üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ 100)

–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É! üéØ
    """
    bot.reply_to(message, games_list, parse_mode='Markdown')

@bot.message_handler(commands=['quiz'])
def quiz_game(message):
    questions = [
        {"question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–∞—è –≥–æ—Ä—è—á–∞—è?", "answer": "–í–µ–Ω–µ—Ä–∞"},
        {"question": "–°–∫–æ–ª—å–∫–æ –∫–æ—Å—Ç–µ–π –≤ —Ç–µ–ª–µ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞?", "answer": "206"},
        {"question": "–ö–∞–∫–æ–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ Au?", "answer": "–ó–æ–ª–æ—Ç–æ"},
        {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É —á–µ–ª–æ–≤–µ–∫ –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ª–µ—Ç–µ–ª –≤ –∫–æ—Å–º–æ—Å?", "answer": "1961"},
        {"question": "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –Ω–∞ –∑–µ–º–ª–µ?", "answer": "–ì–µ–ø–∞—Ä–¥"}
    ]
    
    random.shuffle(questions)
    games[message.chat.id] = {"type": "quiz", "questions": questions, "score": 0, "current": 0}
    
    bot.reply_to(message, f"üß† –í–ò–ö–¢–û–†–ò–ù–ê! –û—Ç–≤–µ—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤!\n\n–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{questions[0]['question']}")

@bot.message_handler(commands=['riddle'])
def riddle_game(message):
    riddles = [
        {"riddle": "–í–∏—Å–∏—Ç –≥—Ä—É—à–∞ - –Ω–µ–ª—å–∑—è —Å–∫—É—à–∞—Ç—å. –ß—Ç–æ —ç—Ç–æ?", "answer": "–ª–∞–º–ø–æ—á–∫–∞"},
        {"riddle": "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?", "answer": "–µ–ª—å"},
        {"riddle": "–°–∏–¥–∏—Ç –¥–µ–¥, –≤–æ —Å—Ç–æ —à—É–± –æ–¥–µ—Ç. –ö—Ç–æ —ç—Ç–æ?", "answer": "–ª—É–∫"}
    ]
    
    riddle = random.choice(riddles)
    games[message.chat.id] = {"type": "riddle", "riddle": riddle}
    
    bot.reply_to(message, f"üîç –ó–ê–ì–ê–î–ö–ê:\n\n{riddle['riddle']}")

@bot.message_handler(commands=['guess'])
def guess_number(message):
    number = random.randint(1, 100)
    games[message.chat.id] = {"type": "guess", "number": number, "attempts": 0}
    
    bot.reply_to(message, "üî¢ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100! –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

# ========== üí∞ –ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢ ==========
@bot.message_handler(commands=['currency', '–∫—É—Ä—Å'])
def convert_currency(message):
    try:
        text = message.text.lower()
        
        if '–¥–æ–ª–ª–∞—Ä' in text or 'usd' in text:
            rate = 95.0
            bot.reply_to(message, f"üíµ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: ~{rate} —Ä—É–±.")
        elif '–µ–≤—Ä–æ' in text or 'eur' in text:
            rate = 102.0
            bot.reply_to(message, f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ: ~{rate} —Ä—É–±.")
        else:
            bot.reply_to(message, "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:\n\n/currency –¥–æ–ª–ª–∞—Ä - –∫—É—Ä—Å USD\n/currency –µ–≤—Ä–æ - –∫—É—Ä—Å EUR")
            
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

# ========== üòÇ –ì–ï–ù–ï–†–ê–¢–û–† –®–£–¢–û–ö ==========
@bot.message_handler(commands=['joke', '—à—É—Ç–∫–∞'])
def tell_joke(message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user", 
                "content": "–†–∞—Å—Å–∫–∞–∂–∏ —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ë—É–¥—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏ –≤–µ—Å–µ–ª—ã–º."
            }],
            max_tokens=150
        )
        
        joke = response.choices[0].message.content
        bot.reply_to(message, f"üòÇ –®—É—Ç–∫–∞:\n\n{joke}")
        
    except Exception as e:
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
            "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∞—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–æ—Ç—É? –ë–∞—Ä–∞-–±–∞—Ä–∞-–±–∞–Ω!",
            "–ü–æ—á–µ–º—É –∫—É—Ä–∏—Ü–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É? –ß—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å –±–æ—Ç—É, —á—Ç–æ –æ–Ω–∞ –Ω–µ –∏–Ω–¥—é–∫!"
        ]
        bot.reply_to(message, f"üòÇ {random.choice(jokes)}")

# ========== üíª –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–î–ê ==========
@bot.message_handler(commands=['code', '–∫–æ–¥'])
def generate_code(message):
    try:
        request = message.text.replace('/code', '').replace('/–∫–æ–¥', '').strip()
        
        if not request:
            bot.reply_to(message, "üíª –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞:\n\n/code –Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Python\n/code —Å–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π")
            return
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user", 
                "content": f"–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è: {request}. –î–∞–π –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."
            }],
            max_tokens=800
        )
        
        code = response.choices[0].message.content
        bot.reply_to(message, f"üíª –ö–æ–¥ –¥–ª—è \"{request}\":\n\n```\n{code}\n```", parse_mode='Markdown')
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")

# ========== ‚úçÔ∏è –ö–†–ï–ê–¢–ò–í–ù–û–ï –ü–ò–°–¨–ú–û ==========
@bot.message_handler(commands=['write', '–Ω–∞–ø–∏—à–∏'])
def creative_writing(message):
    try:
        request = message.text.replace('/write', '').replace('/–Ω–∞–ø–∏—à–∏', '').strip()
        
        if not request:
            bot.reply_to(message, "‚úçÔ∏è –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Å—å–º–æ:\n\n/write –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ –∫–æ—Å–º–æ—Å\n/write —Å—Ç–∏—Ö –ø—Ä–æ –ª—é–±–æ–≤—å")
            return
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user", 
                "content": f"–ù–∞–ø–∏—à–∏: {request}. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º."
            }],
            max_tokens=600
        )
        
        writing = response.choices[0].message.content
        bot.reply_to(message, f"‚úçÔ∏è {writing}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")

# ========== üîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø ==========
@bot.message_handler(commands=['predict', '–ø—Ä–µ–¥—Å–∫–∞–∂–∏'])
def make_prediction(message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user", 
                "content": "–°–¥–µ–ª–∞–π –∑–∞–±–∞–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º. 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            }],
            max_tokens=150
        )
        
        prediction = response.choices[0].message.content
        bot.reply_to(message, f"üîÆ –ú–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n\n{prediction}")
        
    except Exception as e:
        predictions = [
            "–ó–∞–≤—Ç—Ä–∞ —Ç–µ–±—è –∂–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –¥—Ä—É–≥–∞!",
            "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã –Ω–∞–π–¥–µ—à—å —Ä–µ—à–µ–Ω–∏–µ –¥–∞–≤–Ω–µ–π –ø—Ä–æ–±–ª–µ–º—ã!",
            "–°–∫–æ—Ä–æ —Ç–µ–±–µ —É–ª—ã–±–Ω–µ—Ç—Å—è —É–¥–∞—á–∞ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ!"
        ]
        bot.reply_to(message, f"üîÆ {random.choice(predictions)}")

# ========== üß† –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ö–û–£–ß ==========
@bot.message_handler(commands=['advice', '—Å–æ–≤–µ—Ç'])
def give_advice(message):
    try:
        request = message.text.replace('/advice', '').replace('/—Å–æ–≤–µ—Ç', '').strip()
        
        if not request:
            bot.reply_to(message, "üß† –ö–æ—É—á-–ø–æ–º–æ—â–Ω–∏–∫:\n\n/advice –∫–∞–∫ —Å—Ç–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º\n/advice –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º")
            return
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user", 
                "content": f"–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ: {request}. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º."
            }],
            max_tokens=400
        )
        
        advice = response.choices[0].message.content
        bot.reply_to(message, f"üß† –°–æ–≤–µ—Ç –ø–æ \"{request}\":\n\n{advice}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞")

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–† ==========
@bot.message_handler(func=lambda message: message.chat.id in games)
def handle_game_response(message):
    try:
        game = games[message.chat.id]
        user_answer = message.text.strip().lower()
        
        if game["type"] == "quiz":
            current_q = game["questions"][game["current"]]
            if user_answer.lower() == current_q["answer"].lower():
                game["score"] += 1
                bot.reply_to(message, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['answer']}")
            
            game["current"] += 1
            
            if game["current"] < len(game["questions"]):
                next_q = game["questions"][game["current"]]
                bot.reply_to(message, f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_q['question']}")
            else:
                bot.reply_to(message, f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤–æ–π —Å—á–µ—Ç: {game['score']}/5")
                del games[message.chat.id]
                
        elif game["type"] == "riddle":
            if user_answer == game["riddle"]["answer"]:
                bot.reply_to(message, "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –æ—Ç–≥–∞–¥–∞–ª –∑–∞–≥–∞–¥–∫—É!")
                del games[message.chat.id]
            else:
                bot.reply_to(message, "‚ùå –ù–µ —É–≥–∞–¥–∞–ª! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
                
        elif game["type"] == "guess":
            game["attempts"] += 1
            try:
                guess = int(user_answer)
                if guess == game["number"]:
                    bot.reply_to(message, f"üéâ –£–≥–∞–¥–∞–ª! –ó–∞ {game['attempts']} –ø–æ–ø—ã—Ç–æ–∫!")
                    del games[message.chat.id]
                elif guess < game["number"]:
                    bot.reply_to(message, "üìà –ë–æ–ª—å—à–µ!")
                else:
                    bot.reply_to(message, "üìâ –ú–µ–Ω—å—à–µ!")
            except:
                bot.reply_to(message, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
                
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ")

# ========== üí¨ –û–ë–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ==========
@bot.message_handler(commands=['start', 'help'])
def start(message):
    welcome_text = """
ü§ñ *–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–ì–ê-–ë–û–¢* üöÄ

*üé® –ö—Ä–µ–∞—Ç–∏–≤:*
/image [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
/write [–∑–∞–ø—Ä–æ—Å] - –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç/—Å—Ç–∏—Ö–∏
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/predict - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ

*üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:*
/game - –í—Å–µ –∏–≥—Ä—ã
/quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
/riddle - –ó–∞–≥–∞–¥–∫–∏
/guess - –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ

*üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–æ–µ:*
/currency - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
/code - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞
/advice - –°–æ–≤–µ—Ç—ã –∫–æ—É—á–∞

*üì± –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞:*
–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ - (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!)

*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å - –∏ —è –æ—Ç–≤–µ—á—É!* ‚ú®
    """
    bot.reply_to(message, welcome_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ, –Ω–æ –Ω–µ —Å–∫—É—á–Ω–æ."
                },
                {
                    "role": "user", 
                    "content": message.text
                }
            ],
            max_tokens=600
        )
        
        answer = response.choices[0].message.content
        
        if len(answer) > 4096:
            for i in range(0, len(answer), 4096):
                part = answer[i:i+4096]
                if i == 0:
                    bot.reply_to(message, part)
                else:
                    bot.send_message(message.chat.id, part)
        else:
            bot.reply_to(message, answer)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == '__main__':
    logger.info("üöÄ –ú–ï–ì–ê-–ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø...")
    bot.infinity_polling()