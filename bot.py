import os
import logging
import telebot
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

logger.info("=== –ë–û–¢ –ù–ê–ß–ò–ù–ê–ï–¢ –ó–ê–ü–£–°–ö ===")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

logger.info(f"TELEGRAM_TOKEN: {'***' if TELEGRAM_TOKEN else 'MISSING'}")
logger.info(f"OPENAI_API_KEY: {'***' if OPENAI_API_KEY else 'MISSING'}")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    logger.error("‚ùå –¢–û–ö–ï–ù–´ –ù–ï –ù–ê–ô–î–ï–ù–´!")
    exit(1)

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.username}")
    bot.reply_to(message, "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": message.text}
            ],
            max_tokens=500
        )
        
        answer = response.choices[0].message.content
        logger.info("‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        bot.reply_to(message, answer)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
bot.infinity_polling()