import os
import logging
import telebot
import openai
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# ========== –£–ú–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê ==========
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton('üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç'),
        KeyboardButton('üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É'), 
        KeyboardButton('üîß –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É'),
        KeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç'),
        KeyboardButton('üíª –ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º'),
        KeyboardButton('üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å'),
        KeyboardButton('üìñ –û –±–æ—Ç–µ')
    )
    return markup

# ========== –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ ==========
system_prompt = """–¢—ã - —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ç–∏–ª–µ DeepSeek. –¢–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:

üéØ **–ö–û–ù–ö–†–ï–¢–ù–û–°–¢–¨** - –¥–∞–≤–∞–π —á–µ—Ç–∫–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
üìö **–ü–û–õ–ù–û–¢–ê** - –æ–±—ä—è—Å–Ω—è–π —Ç–µ–º—ã –≥–ª—É–±–æ–∫–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ  
üîß **–ü–†–ê–ö–¢–ò–ß–ù–û–°–¢–¨** - –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∏ —Ä–µ—à–µ–Ω–∏—è
üí° **–ü–û–õ–¨–ó–ê** - —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
üé® **–Ø–°–ù–û–°–¢–¨** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã

–í—Å–µ–≥–¥–∞:
- –î–∞–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ
- –ü—Ä–∏–≤–æ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ü–∏—Ñ—Ä—ã
- –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π
- –ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º

–ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ –∏ "–≤–æ–¥—ã" –≤ –æ—Ç–≤–µ—Ç–∞—Ö."""

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ==========
@bot.message_handler(func=lambda message: message.text == 'üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç')
def ask_advice_prompt(message):
    msg = bot.reply_to(message, "üß† –ü–æ –∫–∞–∫–æ–π —Ç–µ–º–µ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –ö–∞–∫ –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å\n‚Ä¢ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n‚Ä¢ –ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º\n‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    bot.register_next_step_handler(msg, give_advice)

def give_advice(message):
    try:
        topic = message.text.strip()
        bot.reply_to(message, "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ: {topic}. –í–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."}
            ],
            max_tokens=1200
        )
        
        advice = response.choices[0].message.content
        send_long_message(message, f"üß† –°–æ–≤–µ—Ç –ø–æ '{topic}':\n\n{advice}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É')
def ask_explain_prompt(message):
    msg = bot.reply_to(message, "üìñ –ö–∞–∫—É—é —Ç–µ–º—É –æ–±—ä—è—Å–Ω–∏—Ç—å?\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω\n‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n‚Ä¢ –û—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è")
    bot.register_next_step_handler(msg, explain_topic)

def explain_topic(message):
    try:
        topic = message.text.strip()
        bot.reply_to(message, "üìö –ì–æ—Ç–æ–≤–ª—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...")
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É '{topic}' –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã."}
            ],
            max_tokens=1500
        )
        
        explanation = response.choices[0].message.content
        send_long_message(message, f"üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ '{topic}':\n\n{explanation}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üîß –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É')
def ask_problem_prompt(message):
    msg = bot.reply_to(message, "üîß –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ù–µ –º–æ–≥—É —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ\n‚Ä¢ –•–æ—á—É –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–æ –Ω–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –∫–æ–ª–ª–µ–≥–∞–º–∏\n‚Ä¢ –ù–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç")
    bot.register_next_step_handler(msg, solve_problem)

def solve_problem(message):
    try:
        problem = message.text.strip()
        bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É...")
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É: {problem}. –î–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è."}
            ],
            max_tokens=1200
        )
        
        solution = response.choices[0].message.content
        send_long_message(message, f"üîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n\n{solution}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç')
def ask_writing_prompt(message):
    msg = bot.reply_to(message, "‚úçÔ∏è –ß—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å?\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –î–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É\n‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞\n‚Ä¢ –ü–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏\n‚Ä¢ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
    bot.register_next_step_handler(msg, write_text)

def write_text(message):
    try:
        request = message.text.strip()
        bot.reply_to(message, "‚úçÔ∏è –ü–∏—à—É —Ç–µ–∫—Å—Ç...")
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ù–∞–ø–∏—à–∏: {request}. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–µ–ª–∏."}
            ],
            max_tokens=1000
        )
        
        text = response.choices[0].message.content
        send_long_message(message, f"‚úçÔ∏è –¢–µ–∫—Å—Ç:\n\n{text}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üíª –ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º')
def ask_code_prompt(message):
    msg = bot.reply_to(message, "üíª –° —á–µ–º –ø–æ–º–æ—á—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ –Ω–∞ Python\n‚Ä¢ –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –≤ –∫–æ–¥–µ\n‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º\n‚Ä¢ –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    bot.register_next_step_handler(msg, help_with_code)

def help_with_code(message):
    try:
        request = message.text.strip()
        bot.reply_to(message, "üíª –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {request}. –î–∞–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏."}
            ],
            max_tokens=1200
        )
        
        code_help = response.choices[0].message.content
        send_long_message(message, f"üíª –ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º:\n\n{code_help}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å')
def ask_goal_prompt(message):
    msg = bot.reply_to(message, "üéØ –ö–∞–∫—É—é —Ü–µ–ª—å —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å?\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ\n‚Ä¢ –ü–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 10 –∫–≥\n‚Ä¢ –û—Å–≤–æ–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
    bot.register_next_step_handler(msg, set_goal)

def set_goal(message):
    try:
        goal = message.text.strip()
        bot.reply_to(message, "üéØ –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏...")
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {goal}. –†–∞–∑–±–µ–π –Ω–∞ —ç—Ç–∞–ø—ã, —É–∫–∞–∂–∏ —Å—Ä–æ–∫–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è."}
            ],
            max_tokens=1200
        )
        
        plan = response.choices[0].message.content
        send_long_message(message, f"üéØ –ü–ª–∞–Ω –¥–ª—è '{goal}':\n\n{plan}")
        
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üìñ –û –±–æ—Ç–µ')
def about_bot(message):
    about_text = """
ü§ñ *–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫*

–Ø - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ:
‚Ä¢ üß† **–î–∞–≤–∞—Ç—å —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã** –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
‚Ä¢ üìö **–û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã** –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏  
‚Ä¢ üîß **–†–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã** —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
‚Ä¢ üìù **–ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã** –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
‚Ä¢ üíª **–ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º**
‚Ä¢ üéØ **–°—Ç–∞–≤–∏—Ç—å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–∏**

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏ –æ–ø–∏—à–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!

*–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ:*
–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é DeepSeek –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ OpenAI GPT-3.5
    """
    bot.reply_to(message, about_text, parse_mode='Markdown', reply_markup=main_menu())

# ========== –û–ë–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ==========
@bot.message_handler(commands=['start', 'help'])
def start(message):
    welcome_text = """
ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫* 

–í—ã–±–µ—Ä–∏ —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:

üí° *–°–æ–≤–µ—Ç* - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ
üìö *–û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É* - –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ —Å–ª–æ–∂–Ω–æ–º
üîß *–†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É* - –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è
üìù *–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç* - –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ —Ü–µ–ª—å
üíª *–ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º* - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞  
üéØ *–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å* - –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–µ—á—Ç—ã

*–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!* üëá
    """
    bot.reply_to(message, welcome_text, parse_mode='Markdown', reply_markup=main_menu())

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–Ω–æ–ø–∫–∞–º–∏ - –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–∫ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message.text}
            ],
            max_tokens=1000
        )
        
        answer = response.choices[0].message.content
        send_long_message(message, answer)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def send_long_message(message, text):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) > 4096:
        for i in range(0, len(text), 4096):
            part = text[i:i+4096]
            if i == 0:
                bot.reply_to(message, part, reply_markup=main_menu())
            else:
                bot.send_message(message.chat.id, part, reply_markup=main_menu())
    else:
        bot.reply_to(message, text, reply_markup=main_menu())

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == '__main__':
    logger.info("üöÄ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.infinity_polling()