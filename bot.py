import os
import logging
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    logger.error("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

def start_command(update, context):
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ORONA —Å ChatGPT. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!')

def help_command(update, context):
    update.message.reply_text('–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT!')

def handle_message(update, context):
    try:
        user_message = update.message.text
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {user_message}")
        
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_message}],
            max_tokens=500
        )
        
        answer = response.choices[0].message.content
        update.message.reply_text(answer)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

def error_handler(update, context):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    try:
        # –°–æ–∑–¥–∞–µ–º updater
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", start_command))
        dp.add_handler(CommandHandler("help", help_command))
        dp.add_handler(MessageHandler(Filters.text, handle_message))
        dp.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()