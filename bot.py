import os
import logging
import telebot
import openai
import time
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_conversations = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [
        {"role": "system", "content": "–¢—ã - —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ –¥–µ–ª—É."}
    ]
    
    welcome = """
ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫* 

*–ß—Ç–æ —è —É–º–µ—é:*
üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üß† –ü–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚ö° –ë—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–±–æ—è—Ö

*–ö–æ–º–∞–Ω–¥—ã:*
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - —Å–ø—Ä–∞–≤–∫–∞

–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã - —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏! üöÄ
    """
    bot.reply_to(message, welcome, parse_mode='Markdown')

@bot.message_handler(commands=['clear'])
def clear_context(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [
        {"role": "system", "content": "–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."}
    ]
    bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")

@bot.message_handler(commands=['status'])
def status_command(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {}".format(len(user_conversations)))

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üÜò *–ü–æ–º–æ—â—å*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é  
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - —Å–ø—Ä–∞–≤–∫–∞

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ üß† –ü–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ ‚ö° –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
‚Ä¢ üí¨ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ - —è –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á—É! ‚ú®
    """
    bot.reply_to(message, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        user_id = message.from_user.id
        user_message = message.text
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in user_conversations:
            user_conversations[user_id] = [
                {"role": "system", "content": "–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."}
            ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_conversations[user_id].append({"role": "user", "content": user_message})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(user_conversations[user_id]) > 7:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-6:]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=user_conversations[user_id],
            max_tokens=600
        )
        
        bot_response = response.choices[0].message.content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_conversations[user_id].append({"role": "assistant", "content": bot_response})
        
        # –°–Ω–æ–≤–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(user_conversations[user_id]) > 7:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-6:]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, bot_response)
        
        logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        bot.reply_to(message, "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑!")

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    while True:
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
            bot.infinity_polling(timeout=60, long_polling_timeout=30)
            
        except telebot.apihelper.ApiTelegramException as e:
            if "Conflict" in str(e):
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞. –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
                time.sleep(5)
                
        except requests.exceptions.ConnectionError as e:
            logger.error(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)

if __name__ == '__main__':
    logger.info("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    run_bot()