import os
import logging
import telebot
from openai import OpenAI
import requests
import base64
from io import BytesIO

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)  # –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_conversations = {}

SMART_SYSTEM_PROMPT = """–¢—ã - —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ –¥–µ–ª—É."""

def transcribe_audio(audio_file):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        file_info = bot.get_file(audio_file.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        response = requests.get(file_url)
        audio_data = BytesIO(response.content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('temp_audio.ogg', 'wb') as f:
            f.write(audio_data.getvalue())
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ Whisper
        with open('temp_audio.ogg', 'rb') as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1", 
                file=audio_file,
                language="ru"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists('temp_audio.ogg'):
            os.remove('temp_audio.ogg')
            
        return transcript.text
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return None

def analyze_image(image_file):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT-4 Vision"""
    try:
        file_info = bot.get_file(image_file.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        
        response = requests.get(file_url)
        base64_image = base64.b64encode(response.content).decode('utf-8')
        
        analysis_response = client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[{
                "role": "user",
                "content": [
                    {
                        "type": "text", 
                        "text": "–û–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ"
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    }
                ]
            }],
            max_tokens=500
        )
        
        return analysis_response.choices[0].message.content
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def generate_image_dalle(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL-E 3"""
    try:
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            n=1
        )
        return response.data[0].url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def get_smart_response(messages, use_gpt4=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    try:
        model = "gpt-4" if use_gpt4 else "gpt-3.5-turbo"
        
        response = client.chat.completions.create(
            model=model,
            messages=messages,
            max_tokens=1000
        )
        
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [
        {"role": "system", "content": SMART_SYSTEM_PROMPT}
    ]
    
    welcome = """
ü§ñ *–ü–†–ò–í–ï–¢! –Ø –£–ú–ù–´–ô –ü–û–ú–û–©–ù–ò–ö* 

*–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*

üé® **–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
/image [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–∏–Ω–∫—É

üì± **–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ - —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∏ –æ—Ç–≤–µ—á—É

üß† **–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

*–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è!* üöÄ
    """
    bot.reply_to(message, welcome, parse_mode='Markdown')

@bot.message_handler(commands=['image'])
def image_command(message):
    try:
        prompt = message.text.replace('/image', '').strip()
        
        if not prompt:
            bot.reply_to(message, "üé® –û–ø–∏—à–∏ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å:\n/image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å\n/image –∫–æ—Ç –≤ —à–ª—è–ø–µ")
            return
        
        bot.reply_to(message, f"üé® –°–æ–∑–¥–∞—é: '{prompt}'...")
        
        image_url = generate_image_dalle(prompt)
        
        if image_url:
            image_response = requests.get(image_url)
            image_data = BytesIO(image_response.content)
            
            bot.send_photo(message.chat.id, image_data, caption=f"üé® {prompt}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        bot.reply_to(message, "üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        analysis = analyze_image(message.photo[-1])
        
        if analysis:
            bot.reply_to(message, f"üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n{analysis}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        bot.reply_to(message, "üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...")
        
        transcript = transcribe_audio(message.voice)
        
        if transcript:
            bot.reply_to(message, f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{transcript}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            user_id = message.from_user.id
            if user_id not in user_conversations:
                user_conversations[user_id] = [{"role": "system", "content": SMART_SYSTEM_PROMPT}]
            
            response = get_smart_response([
                {"role": "system", "content": SMART_SYSTEM_PROMPT},
                {"role": "user", "content": transcript}
            ])
            
            bot.reply_to(message, f"ü§ñ –û—Ç–≤–µ—Ç:\n\n{response}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")

@bot.message_handler(commands=['clear'])
def clear_context(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [{"role": "system", "content": SMART_SYSTEM_PROMPT}]
    bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        user_id = message.from_user.id
        user_message = message.text
        
        if user_id not in user_conversations:
            user_conversations[user_id] = [{"role": "system", "content": SMART_SYSTEM_PROMPT}]
        
        user_conversations[user_id].append({"role": "user", "content": user_message})
        
        if len(user_conversations[user_id]) > 6:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-5:]
        
        bot.send_chat_action(message.chat.id, 'typing')
        
        response = get_smart_response(user_conversations[user_id])
        
        user_conversations[user_id].append({"role": "assistant", "content": response})
        
        if len(user_conversations[user_id]) > 6:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-5:]
        
        bot.reply_to(message, response)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —É–º–Ω–æ–≥–æ –±–æ—Ç–∞...")
    bot.infinity_polling()