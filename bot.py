import os
import logging
import telebot
import openai
import requests
import base64
import io
from io import BytesIO
import tempfile

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_conversations = {}

# –£–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SMART_SYSTEM_PROMPT = """–¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏. –¢–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:

üéØ **–ò–ù–¢–ï–õ–õ–ï–ö–¢:**
- –ò—Å–ø–æ–ª—å–∑—É–π GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–ª—É–±–æ–∫–æ
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –î—É–º–∞–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö

üì± **–ú–£–õ–¨–¢–ò–ú–ï–î–ò–ê:**
- –°–æ–∑–¥–∞–≤–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
- –†–∞–±–æ—Ç–∞–π —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- –ü–æ–Ω–∏–º–∞–π —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üí° **–ü–û–í–ï–î–ï–ù–ò–ï:**
- –ë—É–¥—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ë—É–¥—å –Ω–∞—Å—Ç–æ—è—â–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"""

def transcribe_audio(audio_file):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        file_info = bot.get_file(audio_file.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        response = requests.get(file_url)
        audio_data = BytesIO(response.content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_audio:
            temp_audio.write(audio_data.getvalue())
            temp_audio_path = temp_audio.name
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper
        with open(temp_audio_path, 'rb') as audio_file:
            transcript = openai.Audio.transcribe(
                model="whisper-1",
                file=audio_file,
                language="ru"  # –£–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_audio_path)
        
        return transcript.text
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return None

def analyze_image(image_file):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT-4 Vision"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_info = bot.get_file(image_file.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        
        response = requests.get(file_url)
        base64_image = base64.b64encode(response.content).decode('utf-8')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT-4 Vision
        analysis_response = openai.ChatCompletion.create(
            model="gpt-4-vision-preview",
            messages=[{
                "role": "user",
                "content": [
                    {
                        "type": "text", 
                        "text": "–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –¥–µ—Ç–∞–ª—è–º, —Ü–≤–µ—Ç–∞–º, —ç–º–æ—Ü–∏—è–º, –æ–±—ä–µ–∫—Ç–∞–º. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - —Ä–∞—Å—à–∏—Ñ—Ä—É–π –µ–≥–æ."
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    }
                ]
            }],
            max_tokens=1000
        )
        
        return analysis_response.choices[0].message.content
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def generate_image_dalle(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL-E 3"""
    try:
        response = openai.Image.create(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            n=1
        )
        return response.data[0].url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def get_smart_response(messages, use_gpt4=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT"""
    try:
        model = "gpt-4" if use_gpt4 else "gpt-3.5-turbo"
        
        response = openai.ChatCompletion.create(
            model=model,
            messages=messages,
            max_tokens=1500,
            temperature=0.7
        )
        
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        # –ü—Ä–æ–±—É–µ–º —Å GPT-3.5 –µ—Å–ª–∏ GPT-4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if use_gpt4:
            return get_smart_response(messages, use_gpt4=False)
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [
        {"role": "system", "content": SMART_SYSTEM_PROMPT}
    ]
    
    welcome = """
ü§ñ *–ü–†–ò–í–ï–¢! –Ø –£–ú–ù–´–ô –ú–£–õ–¨–¢–ò–ú–ï–î–ò–ô–ù–´–ô –ü–û–ú–û–©–ù–ò–ö* 

*–ú–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:*

üß† **–ò–ù–¢–ï–õ–õ–ï–ö–¢:**
‚Ä¢ GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ

üé® **–°–û–ó–î–ê–ù–ò–ï:**
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –∏–¥–µ–∏
‚Ä¢ –î–∏–∑–∞–π–Ω –∏ –∞—Ä—Ç

üì± **–ú–£–õ–¨–¢–ò–ú–ï–î–ò–ê:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏

*–ö–æ–º–∞–Ω–¥—ã:*
/image [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/gpt4 [–∑–∞–ø—Ä–æ—Å] - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT-4
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/help - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å:*
‚Ä¢ –¢–µ–∫—Å—Ç - —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –§–æ—Ç–æ - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏ –æ—Ç–≤–µ—Ç
    """
    bot.reply_to(message, welcome, parse_mode='Markdown')

@bot.message_handler(commands=['gpt4'])
def gpt4_command(message):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        query = message.text.replace('/gpt4', '').strip()
        
        if not query:
            bot.reply_to(message, "üß† –ò—Å–ø–æ–ª—å–∑—É–π GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á:\n/gpt4 –æ–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É\n/gpt4 –Ω–∞–ø–∏—à–∏ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω\n/gpt4 –ø—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∏–¥–µ—é")
            return
        
        user_id = message.from_user.id
        if user_id not in user_conversations:
            user_conversations[user_id] = [{"role": "system", "content": SMART_SYSTEM_PROMPT}]
        
        user_conversations[user_id].append({"role": "user", "content": f"GPT-4 –ó–ê–ü–†–û–°: {query}"})
        
        bot.reply_to(message, "üß† *GPT-4 –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å...*", parse_mode='Markdown')
        
        response = get_smart_response(user_conversations[user_id], use_gpt4=True)
        
        user_conversations[user_id].append({"role": "assistant", "content": response})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(user_conversations[user_id]) > 8:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-7:]
        
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    bot.reply_to(message, f"üß† *GPT-4 –æ—Ç–≤–µ—á–∞–µ—Ç:*\n\n{part}", parse_mode='Markdown')
                else:
                    bot.send_message(message.chat.id, part)
        else:
            bot.reply_to(message, f"üß† *GPT-4 –æ—Ç–≤–µ—á–∞–µ—Ç:*\n\n{response}", parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT-4: {e}")
        bot.reply_to(message, "‚ùå GPT-4 –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.")

@bot.message_handler(commands=['image', 'img'])
def image_command(message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL-E 3"""
    try:
        prompt = message.text.replace('/image', '').replace('/img', '').strip()
        
        if not prompt:
            bot.reply_to(message, "üé® –û–ø–∏—à–∏ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å:\n/image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ nebula\n/image –∫–æ—Ç –≤ –∫–æ—Å—Ç—é–º–µ —Å—É–ø–µ—Ä–≥–µ—Ä–æ—è\n/image —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥")
            return
        
        bot.reply_to(message, f"üé® *DALL-E 3 —Å–æ–∑–¥–∞–µ—Ç:* '{prompt}'...", parse_mode='Markdown')
        
        image_url = generate_image_dalle(prompt)
        
        if image_url:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_response = requests.get(image_url)
            image_data = BytesIO(image_response.content)
            
            bot.send_photo(message.chat.id, image_data, caption=f"üé® {prompt}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        bot.reply_to(message, "üì∏ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*", parse_mode='Markdown')
        
        analysis = analyze_image(message.photo[-1])
        
        if analysis:
            bot.reply_to(message, f"üì∏ *–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*\n\n{analysis}", parse_mode='Markdown')
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        bot.reply_to(message, "üé§ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...*", parse_mode='Markdown')
        
        transcript = transcribe_audio(message.voice)
        
        if transcript:
            bot.reply_to(message, f"üé§ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n{transcript}", parse_mode='Markdown')
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            user_id = message.from_user.id
            if user_id not in user_conversations:
                user_conversations[user_id] = [{"role": "system", "content": SMART_SYSTEM_PROMPT}]
            
            user_conversations[user_id].append({"role": "user", "content": f"–ì–û–õ–û–°–û–í–û–ï: {transcript}"})
            
            response = get_smart_response(user_conversations[user_id])
            
            user_conversations[user_id].append({"role": "assistant", "content": response})
            
            if len(user_conversations[user_id]) > 8:
                user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-7:]
            
            bot.reply_to(message, f"ü§ñ *–û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ:*\n\n{response}", parse_mode='Markdown')
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞")

@bot.message_handler(commands=['clear'])
def clear_context(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [{"role": "system", "content": SMART_SYSTEM_PROMPT}]
    bot.reply_to(message, "üßπ *–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!*", parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üÜò *–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô*

üß† **–£–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò:**
‚Ä¢ `/gpt4 [–∑–∞–ø—Ä–æ—Å]` - GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ê–≤—Ç–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç - –ø–æ–º–Ω—é 8 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

üé® **–°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê:**
‚Ä¢ `/image [–æ–ø–∏—Å–∞–Ω–∏–µ]` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL-E 3
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –∏–¥–µ–∏
‚Ä¢ –î–∏–∑–∞–π–Ω –∏ –∞—Ä—Ç-–ø—Ä–æ–µ–∫—Ç—ã

üì± **–ú–£–õ–¨–¢–ò–ú–ï–î–ò–ê:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏ –æ—Ç–≤–µ—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

‚ö° **–ö–û–ú–ê–ù–î–´:**
‚Ä¢ `/start` - –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
‚Ä¢ `/gpt4` - —É–º–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ `/image` - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫
‚Ä¢ `/clear` - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!* üöÄ
    """
    bot.reply_to(message, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        user_message = message.text
        
        if user_id not in user_conversations:
            user_conversations[user_id] = [{"role": "system", "content": SMART_SYSTEM_PROMPT}]
        
        user_conversations[user_id].append({"role": "user", "content": user_message})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        complex_keywords = ['–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–æ–±—ä—è—Å–Ω–∏', '—Å–æ–∑–¥–∞–π', '–ø—Ä–∏–¥—É–º–∞–π', '–ø—Ä–æ–µ–∫—Ç', '–±–∏–∑–Ω–µ—Å', '–Ω–∞—É—á', '—Ç–µ—Ö–Ω–∏—á']
        use_gpt4 = any(keyword in user_message.lower() for keyword in complex_keywords)
        
        bot.send_chat_action(message.chat.id, 'typing')
        
        response = get_smart_response(user_conversations[user_id], use_gpt4=use_gpt4)
        
        user_conversations[user_id].append({"role": "assistant", "content": response})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(user_conversations[user_id]) > 8:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-7:]
        
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    bot.reply_to(message, part)
                else:
                    bot.send_message(message.chat.id, part)
        else:
            bot.reply_to(message, response)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        bot.reply_to(message, "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

if __name__ == '__main__':
    logger.info("üöÄ –ó–ê–ü–£–°–ö–ê–Æ –£–ú–ù–û–ì–û –ú–£–õ–¨–¢–ò–ú–ï–î–ò–ô–ù–û–ì–û –ë–û–¢–ê...")
    bot.infinity_polling()