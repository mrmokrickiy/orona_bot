import os
import logging
import telebot
import openai
import requests
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
SERPER_API_KEY = os.getenv('SERPER_API_KEY')  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_conversations = {}

def search_google(query):
    """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Serper API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"""
    try:
        url = "https://google.serper.dev/search"
        payload = json.dumps({"q": query})
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        
        response = requests.post(url, headers=headers, data=payload)
        results = response.json()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        search_info = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
        
        if 'organic' in results:
            for i, result in enumerate(results['organic'][:3], 1):
                title = result.get('title', '')
                link = result.get('link', '')
                snippet = result.get('snippet', '')[:150] + '...'
                search_info += f"{i}. *{title}*\n{snippet}\n{link}\n\n"
        
        return search_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [
        {"role": "system", "content": "–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."}
    ]
    
    welcome = """
ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç* 

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–Ω–ª–∞–π–Ω
‚Ä¢ üí¨ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞  
‚Ä¢ üìä –î–∞–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–æ–≤–æ—Å—Ç–∏

*–ö–æ–º–∞–Ω–¥—ã:*
/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/help - —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –æ —á–µ–º-—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º! üåê
    """
    bot.reply_to(message, welcome, parse_mode='Markdown')

@bot.message_handler(commands=['search', '–ø–æ–∏—Å–∫'])
def search_command(message):
    try:
        query = message.text.replace('/search', '').replace('/–ø–æ–∏—Å–∫', '').strip()
        
        if not query:
            bot.reply_to(message, "üîç –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n/search –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n/search –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
            return
        
        bot.reply_to(message, f"üîç –ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: '{query}'...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = search_google(query)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if len(search_results) > 4096:
            for i in range(0, len(search_results), 4096):
                part = search_results[i:i+4096]
                if i == 0:
                    bot.reply_to(message, part, parse_mode='Markdown')
                else:
                    bot.send_message(message.chat.id, part, parse_mode='Markdown')
        else:
            bot.reply_to(message, search_results, parse_mode='Markdown')
            
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")

@bot.message_handler(commands=['clear'])
def clear_context(message):
    user_id = message.from_user.id
    user_conversations[user_id] = [
        {"role": "system", "content": "–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."}
    ]
    bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –ø–æ–∏—Å–∫—É*

*–ö–æ–º–∞–Ω–¥—ã:*
/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/help - —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
/search –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ —Å–µ–≥–æ–¥–Ω—è
/search –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
/search –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
/search –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É

*–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Google –∏ –¥–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!* üîç
    """
    bot.reply_to(message, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        user_id = message.from_user.id
        user_message = message.text
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        search_keywords = ['–ø–æ–≥–æ–¥–∞', '–∫—É—Ä—Å', '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '2024', '2025', '–∞–∫—Ç—É–∞–ª—å–Ω', '—Å–≤–µ–∂–∏–µ']
        
        if any(keyword in user_message.lower() for keyword in search_keywords):
            bot.reply_to(message, f"üîç –ó–∞–ø—Ä–æ—Å –≤—ã–≥–ª—è–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–º! –ò—Å–ø–æ–ª—å–∑—É–π /search {user_message} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.")
            return
        
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if user_id not in user_conversations:
            user_conversations[user_id] = [
                {"role": "system", "content": "–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."}
            ]
        
        user_conversations[user_id].append({"role": "user", "content": user_message})
        
        if len(user_conversations[user_id]) > 7:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-6:]
        
        bot.send_chat_action(message.chat.id, 'typing')
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=user_conversations[user_id],
            max_tokens=600
        )
        
        bot_response = response.choices[0].message.content
        user_conversations[user_id].append({"role": "assistant", "content": bot_response})
        
        if len(user_conversations[user_id]) > 7:
            user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-6:]
        
        bot.reply_to(message, bot_response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ —Å –ø–æ–∏—Å–∫–æ–º...")
    bot.infinity_polling()